======================
一些特殊的 操作符
======================

元素查询操作符(Element Query Operators)
=================================================

$exists
--------------------

匹配文档中的某个字段是否存在：
::

    # 插入 三条 测试数据
    db.test.insertMany([
        {x:1, obj:{}},
        {x:1, obj:{a:1}},
        {x:1, obj:{a:2}}
    ])
    # 查询  条件为   obj字段中的a字段存在
    db.test.find({'obj.a':{$exists:true}})
    # 返回如下结果：
    { "_id" : ObjectId("62590fbb1e4073db76ae68fd"), "x" : 1, "obj" : { "a" : 1 } }
    { "_id" : ObjectId("62590fbb1e4073db76ae68fe"), "x" : 1, "obj" : { "a" : 2 } }


$type
--------------------------

选择某个字段为某种特定类型的文档


$size
------------------------

数组元素个数

.. code-block::

    db.collections.find({`array_name`:{$size:50}})

$all
-------------------------

匹配所有

这个操作符跟SQL 语法的in 类似，但不同的是, in 只需满足( )内的某一个值即可, 而$all 必须满足[ ]内的所有值，例如:

::

    db.users.find({age : {$all : [6, 8]}});
    可以查询出：
    {name: 'David', age: 26, age: [ 6, 8, 9 ] }
    但查询不出：
    {name: 'David', age: 26, age: [ 6, 7, 9 ] }

$elemMatch
------------------

$elemMatch 数组查询操作用于查询数组值中至少有一个能完全匹配所有的查询条件的文档。语法格式如下：

`{ <field>: { $elemMatch: { <query1>, <query2>, ... } } }`

| 如果只有一个查询条件就没必要使用 $elemMatch。

数组中是一个个对象 , 假设mongo的test集合中有如下的文档:
::

    # documents
    {'_id':xxx, 'name': '张三', 'visit_url': [{'proto', 'http', 'host': 'www.baidu.com'}, {'proto': 'https', 'host':'www.qq.com'}], 'date': ISODate('2019-09-04 00:00:00')},
    {'_id':xxx, 'name': '李四', 'visit_url': [{'proto', 'https', 'host': 'aliyun.com'}, {'proto': 'https', 'host':'www.baidu.com'}, 'date': ISODate('2019-09-04 12:00:00')},

mongo语句:
::

    db.collection.find({'visit_url': {'$elemMatch': {'proto': 'https', 'host': 'www.baidu.com'}}})





评估查询操作符(Evaluation Query Operators)
========================================================

$expr
--------------------------

允许在查询语言中使用聚合表达式：

::

    例如，应用程序可能希望每月为用户提供一定数量的免费积分，并以数组形式跟踪同一帐户的所有费用:
    db.test.insertMany([
       {"credits": 5000, "expenses": [2000, 2000]},
       {"credits": 4000, "expenses": [1000, 4000, 2000]},
       {"credits": 3000, "expenses": [1500, 750]},
       {"credits": 2000, "expenses": [2500, 750]}
    ])
    要查找总费用超过该帐户信用的帐户，您可以运行以下查询：
    db.test.find({$expr:{$gte:[{$sum:['$expenses']}, '$credits']}})
    返回如下结果
    { "_id" : ObjectId("625910c21e4073db76ae6900"), "credits" : 4000, "expenses" : [ 1000, 4000, 2000 ] }
    { "_id" : ObjectId("625910c21e4073db76ae6902"), "credits" : 2000, "expenses" : [ 2500, 750 ] }




$jsonSchema
-----------------------

校验文档是否与给定的JSON格式一致

$mod
-----------------------

对数值类型字段进行取模运算：
::

    取出qty的值，对4取余等于0的数据：

    db.inventory.find( { qty: { $mod: [ 4, 0 ] } } )


$regex
------------------------

通过正则表达式筛选文档 模糊匹配:
::

    SELECT * FROM products WHERE sku like "789";
    db.products.find( { sku: { $regex: '789' } } )

匹配S开头，或者含有换行符的Bson：
::

    db.products.find( { description: { $regex: 'xxx', $options: 'm' } } )

    Option ===== Description

    参数 i ====== 加了这个参数，表示不区分大小写

    参数 m ===== 个人理解这个参数是用来匹配value中有换行符(\n)的情形。

    参数 s ===== 允许点字符（.）匹配所有的字符，包括换行符。

    参数 x ====== 官网的大意是忽视空白字符。




$text
------------------------

执行文本搜索



$where
------------------------

通过JavaScript表达式匹配文档


