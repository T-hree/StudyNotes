排序
====

-  **比较类排序**\ ：通过比较来决定元素间的相对次序，由于其时间复杂度不能突破O(nlogn)，因此也称为非线性时间比较类排序。

-  **非比较类排序**\ ：不通过比较来决定元素间的相对次序，它可以突破基于比较排序的时间下界，以线性时间运行，因此也称为线性时间非比较类排序。

.. figure:: https://raw.githubusercontent.com/T-hree/Blog_img/main/img/849589-20190306165258970-1789860540.png
   :alt: 

.. figure:: https://raw.githubusercontent.com/T-hree/Blog_img/main/img/849589-20180402133438219-1946132192.png
   :alt: 

冒泡排序
--------

冒泡排序（Bubble
Sort）也是一种简单直观的排序算法。它重复地走访过要排序的数列，一次比较两个元素，如果他们的顺序错误就把他们交换过来。
走访数列的工作是重复地进行直到没有再需要交换，也就是说该数列已经排序完成。

.. _1-算法步骤-1:

1. 算法步骤
~~~~~~~~~~~

| 比较相邻的元素，如果第一个比第二个大（升序）或小（降序），
  就交换他们两个
| 对每一对相邻元素作同样的工作，从开始第一对到结尾的最后一对。这步做完后，最后的元素会是最大的数。
| 针对所有的元素重复以上的步骤，除了最后一个。
| 持续每次对越来越少的元素重复上面的步骤，直到没有任何一对数字需要比较。

.. _2-动图演示-1:

2. 动图演示
~~~~~~~~~~~

.. figure:: https://raw.githubusercontent.com/T-hree/Blog_img/main/img/bubbleSort.gif
   :alt: 

.. _代码实现-1:

代码实现
~~~~~~~~

.. code:: python

   def bubble_sort_pro(ls):
       for i in range(len(ls) - 1):  # 第i趟
           exchange = False
           for j in range(len(ls) - i - 1):  # 指针
               if ls[j] > ls[j + 1]:  # 升序
                   # < 降序
                   ls[j], ls[j + 1] = ls[j + 1], ls[j]
                   exchange = True
           if not exchange:
               return

选择排序
--------

选择排序是一种简单直观的排序算法，无论什么数据进去都是 O(n²)
的时间复杂度。所以用到它的时候，数据规模越小越好。唯一的好处可能就是不占用额外的内存空间了吧。

.. _1-算法步骤-2:

1. 算法步骤
~~~~~~~~~~~

首先在未排序序列中找到最小（大）元素，存放到排序序列的起始位置。

再从剩余未排序元素中继续寻找最小（大）元素，然后放到已排序序列的末尾。

重复第二步，直到所有元素均排序完毕。

.. _2-动图演示-2:

2. 动图演示
~~~~~~~~~~~

.. figure:: https://raw.githubusercontent.com/T-hree/Blog_img/main/img/selectionSort.gif
   :alt: 

.. _代码实现-2:

代码实现
~~~~~~~~

.. code:: python

   def select_sort(ls):
   	new_ls = []
     for i in range(len(ls)):
       min_val = min(ls)
       new_ls.append(min_val)
       ls.remove(min_val)
     return new_ls

   def select_sort_2(ls):
     for i in range(len(ls) - 1):
       min_index = i
       for j in range(i+1, len(ls)):
         if ls[min_index] > ls[j]:
           min_index = j
       ls[min_index], ls[j] = ls[j], ls[min_index]

插入排序
--------

插入排序的代码实现虽然没有冒泡排序和选择排序那么简单粗暴，但它的原理应该是最容易理解的了，因为只要打过扑克牌的人都应该能够秒懂。插入排序是一种最简单直观的排序算法，它的工作原理是通过构建有序序列，对于未排序数据，在已排序序列中从后向前扫描，找到相应位置并插入。

插入排序和冒泡排序一样，也有一种优化算法，叫做拆半插入。

简单理解为 打扑克 现在你手上没有牌 每次从牌堆中抽一张牌 按手中牌的顺序放

手中的牌 理解为有序区， 牌堆中的牌理解为无序区

.. _1-算法步骤-3:

1. 算法步骤
~~~~~~~~~~~

将第一待排序序列第一个元素看做一个有序序列，把第二个元素到最后一个元素当成是未排序序列。

从头到尾依次扫描未排序序列，将扫描到的每个元素插入有序序列的适当位置。（如果待插入的元素与有序序列中的某个元素相等，则将待插入元素插入到相等元素的后面。）

.. _2-动图演示-3:

2. 动图演示
~~~~~~~~~~~

.. figure:: https://raw.githubusercontent.com/T-hree/Blog_img/main/img/insertionSort.gif
   :alt: 

--------------

.. _代码实现-3:

代码实现
~~~~~~~~

.. code:: python

   # 插入排序
   def insert_sort(ls):
       for i in range(1, len(ls)):  # i 为无序区第一个数 的下标
           tmp = ls[i]
           j = i - 1  # 有序区的最后一个数的下标
           while j >= 0 and ls[j] > tmp:
               ls[j + 1] = ls[j]
               j -= 1
           ls[j + 1] = tmp

快速排序
--------

快速排序是由东尼·霍尔所发展的一种排序算法。在平均状况下，排序 n 个项目要
Ο(nlogn) 次比较。在最坏状况下则需要 Ο(n2)
次比较，但这种状况并不常见。事实上，快速排序通常明显比其他 Ο(nlogn)
算法更快，因为它的内部循环（inner
loop）可以在大部分的架构上很有效率地被实现出来。

快速排序使用分治法（Divide and
conquer）策略来把一个串行（list）分为两个子串行（sub-lists）。

快速排序又是一种分而治之思想在排序算法上的典型应用。本质上来看，快速排序应该算是在冒泡排序基础上的递归分治法。

快速排序的名字起的是简单粗暴，因为一听到这个名字你就知道它存在的意义，就是快，而且效率高！它是处理大数据最快的排序算法之一了。虽然
Worst Case 的时间复杂度达到了
O(n²)，但是人家就是优秀，在大多数情况下都比平均时间复杂度为 O(n logn)
的排序算法表现要更好，可是这是为什么呢，我也不知道。好在我的强迫症又犯了，查了
N 多资料终于在《算法艺术与信息学竞赛》上找到了满意的答案：

   快速排序的最坏运行情况是
   O(n²)，比如说顺序数列的快排。但它的平摊期望时间是 O(nlogn)，且
   O(nlogn) 记号中隐含的常数因子很小，比复杂度稳定等于 O(nlogn)
   的归并排序要小很多。所以，对绝大多数顺序性较弱的随机数列而言，快速排序总是优于归并排序。

.. _1-算法步骤-4:

1. 算法步骤
~~~~~~~~~~~

1. 从数列中挑出一个元素，称为 "基准"（pivot）;

2. 重新排序数列，所有元素比基准值小的摆放在基准前面，所有元素比基准值大的摆在基准的后面（相同的数可以到任一边）。在这个分区退出之后，该基准就处于数列的中间位置。这个称为分区（partition）操作；

3. 递归地（recursive）把小于基准值元素的子数列和大于基准值元素的子数列排序；

.. _2-动图演示-4:

2. 动图演示
~~~~~~~~~~~

.. figure:: https://raw.githubusercontent.com/T-hree/Blog_img/main/img/quickSort.gif
   :alt: 

--------------

.. _代码实现-4:

代码实现
~~~~~~~~

.. code:: python

   def partition(ls, left, right):
       tmp = ls[left]
       while left < right:
           while left < right and ls[right] >= tmp:
               right -= 1
           ls[left] = ls[right]
           while left < right and ls[left] <= tmp:
               left += 1
           ls[right] = ls[left]
       ls[left] = tmp
       return left


   def _quick_sort(ls, left, right):
       if left < right:
           mid = partition(ls, left, right)
           _quick_sort(ls, left, mid - 1)
           _quick_sort(ls, mid + 1, right)


   def quick_sort(ls):
       _quick_sort(ls, 0, len(ls) - 1)

堆排序
------

堆排序（Heapsort）是指利用堆这种数据结构所设计的一种排序算法。堆积是一个近似完全二叉树的结构，并同时满足堆积的性质：即子节点的键值或索引总是小于（或者大于）它的父节点。堆排序可以说是一种利用堆的概念来排序的选择排序。分为两种方法：

1. 大顶堆：每个节点的值都大于或等于其子节点的值，在堆排序算法中用于升序排列；

2. 小顶堆：每个节点的值都小于或等于其子节点的值，在堆排序算法中用于降序排列；

堆排序的平均时间复杂度为 Ο(nlogn)。

.. figure:: https://raw.githubusercontent.com/T-hree/Blog_img/main/img/heapSort.gif
   :alt: 

二叉树
~~~~~~

.. figure:: https://raw.githubusercontent.com/T-hree/Blog_img/main/img/image-20220906111759202.png
   :alt: 

.. _二叉树的存储方式顺序存储方式）:

二叉树的存储方式（顺序存储方式）
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. figure:: https://raw.githubusercontent.com/T-hree/Blog_img/main/img/image-20220906152623888.png
   :alt: 

堆排序过程
~~~~~~~~~~

-  建立堆

-  得到堆顶元素， 为最大元素

-  去掉堆顶， 将堆最后一个元素放到堆顶， 此时可通过一次调整重新使堆有序

-  对顶元素为第二大元素

-  重复步骤3 ， 直到堆变空

.. _代码实现-5:

代码实现
~~~~~~~~

.. code:: python

   # 堆排序
   def sift(ls, low, high):
       """
       调整堆
       :param ls: 列表
       :param low: 堆顶位置 ，堆得根节点位置
       :param high: 堆的最后一个元素的位置
       :return:
       """
       i = low  # 最开始的  父节点（根节点）
       j = 2 * i + 1  # 开始为左孩子节点
       tmp = ls[low]  # 堆顶存起来
       while j <= high:  # 只要j位置没有越界
           # 比较左右孩子节点
           if j + 1 <= high and ls[j + 1] > ls[j]:
               # 如果 右孩子节点存在且 比左孩子节点大
               j += 1  # j指向右孩子节点
           if ls[j] > tmp:
               ls[i] = ls[j]
               i = j
               j = 2 * i + 1
           else:  # tmp更大
               ls[i] = tmp
               break
       else:
           # 越界（tmp放在叶子节点上）
           ls[i] = tmp

   def heap_sort(ls):
       n = len(ls)
       # 建堆
       # 孩子找父亲  (i - 1)//2
       for i in range((n - 2) // 2, -1, -1):
           # i 为建堆 调整部分的根的下标
           sift(ls, i, n - 1)
       # 建堆完成
       for i in range(n - 1, -1, -1):
           ls[i], ls[0] = ls[0], ls[i]  # 将最大的放在最后
           sift(ls, 0, i - 1)  # 最后元素的下标减一

topk问题
~~~~~~~~

-  现有n个数， 设计算法得到前k大的数（k<n）

-  解决思路：

   -  排序后切片 O(nlogn)

   -  排序中只排序前 k个数 O(kn)

   -  堆排序 O(nlogk)

      -  区列表前k个元素建立一个小根堆。 堆顶就是目前第k大的数

      -  依次向后遍历原列表，对于列表中的元素，
         如果小于堆顶，则忽略该元素，如果大于堆顶，则将堆顶更换为改元素，
         并且对堆顶进行一次调整。

      -  遍历列表所有元素后， 倒序弹出堆顶

.. _代码实现-6:

代码实现
^^^^^^^^

.. code:: python

   # 调整小根堆
   def sift_min(ls, low, high):
       """
       调整堆
       :param ls: 列表
       :param low: 堆顶位置 ，堆得根节点位置
       :param high: 堆的最后一个元素的位置
       :return:
       """
       i = low  # 最开始的  父节点（根节点）
       j = 2 * i + 1  # 开始为左孩子节点
       tmp = ls[low]  # 堆顶存起来
       while j <= high:  # 只要j位置没有越界
           # 比较左右孩子节点
           if j + 1 <= high and ls[j + 1] < ls[j]:
               # 如果 右孩子节点存在且 比左孩子节点大
               j += 1  # j指向右孩子节点
           if ls[j] < tmp:
               ls[i] = ls[j]
               i = j
               j = 2 * i + 1
           else:  # tmp更大
               break
           ls[i] = tmp

   # topk 问题
   @cal_time
   def topk(ls, k):
       heap = ls[0:k]
       # 建堆
       for i in range(k - 2 // 2, -1, -1):
           sift_min(heap, i, k - 1)
       # 遍历
       for i in range(k, len(ls) - 1):
           if ls[i] > heap[0]:
               heap[0] = ls[i]
               sift_min(heap, 0, k - 1)
       # 出数
       for i in range(k - 1, -1, -1):
           heap[0], heap[i] = heap[i], heap[0]
           sift_min(heap, 0, i - 1)
       return heap

归并排序
--------

归并排序（Merge
sort）是建立在归并操作上的一种有效的排序算法。该算法是采用分治法（Divide
and Conquer）的一个非常典型的应用。

作为一种典型的分而治之思想的算法应用，归并排序的实现由两种方法：

-  自上而下的递归（所有递归的方法都可以用迭代重写，所以就有了第 2
   种方法）；

-  自下而上的迭代；

在《数据结构与算法 JavaScript
描述》中，作者给出了自下而上的迭代方法。但是对于递归法，作者却认为：

   However, it is not possible to do so in JavaScript, as the recursion
   goes too deep for the language to handle.

   然而，在 JavaScript
   中这种方式不太可行，因为这个算法的递归深度对它来讲太深了。

说实话，我不太理解这句话。意思是 JavaScript
编译器内存太小，递归太深容易造成内存溢出吗？还望有大神能够指教。

和选择排序一样，归并排序的性能不受输入数据的影响，但表现比选择排序好的多，因为始终都是
O(nlogn) 的时间复杂度。代价是需要额外的内存空间。

.. _1-算法步骤-5:

1. 算法步骤
~~~~~~~~~~~

1. 申请空间，使其大小为两个已经排序序列之和，该空间用来存放合并后的序列；

2. 设定两个指针，最初位置分别为两个已经排序序列的起始位置；

3. 比较两个指针所指向的元素，选择相对小的元素放入到合并空间，并移动指针到下一位置；

4. 重复步骤 3 直到某一指针达到序列尾；

5. 将另一序列剩下的所有元素直接复制到合并序列尾。

.. _2-动图演示-5:

2. 动图演示
~~~~~~~~~~~

.. figure:: https://raw.githubusercontent.com/T-hree/Blog_img/main/img/mergeSort.gif
   :alt: 

--------------

.. _代码实现-7:

代码实现
~~~~~~~~

.. code:: python

   # 归并排序
   def merge(ls, low, high, mid):
       i = low
       j = mid + 1
       ltmp = []
       while i <= mid and j <= high:
           if ls[i] > ls[j]:
               ltmp.append(ls[j])
               j += 1
           else:
               ltmp.append(ls[i])
               i += 1
       while i <= mid:
           ltmp.append(ls[i])
           i += 1
       while j <= high:
           ltmp.append(ls[j])
           j += 1
       ls[low:high + 1] = ltmp


   def merge_sort(ls, low, high):
       if low < high:  # 至少有两个元素， 递归
           mid = (low + high) // 2
           merge_sort(ls, low, mid)
           merge_sort(ls, mid + 1, high)
           merge(ls, low, high, mid)

归并，堆，快速排序总结
----------------------

-  三种排序算法的时间复杂度都是O(nlogn)

-  一般情况下， 就运行时间：

   -  快速排序 < 归并排序 < 堆排序

-  三种算法的缺点：

   -  快速排序： 极端情况下排序效率低

   -  归并排序： 需要额外的内存开销

   -  堆排序： 在快的排序算法中相对较慢

希尔排序
--------

希尔排序，也称递减增量排序算法，是插入排序的一种更高效的改进版本。但希尔排序是非稳定排序算法。

希尔排序是基于插入排序的以下两点性质而提出改进方法的：

-  插入排序在对几乎已经排好序的数据操作时，效率高，即可以达到线性排序的效率；

-  但插入排序一般来说是低效的，因为插入排序每次只能将数据移动一位；

希尔排序的基本思想是：先将整个待排序的记录序列分割成为若干子序列分别进行直接插入排序，待整个序列中的记录"基本有序"时，再对全体记录进行依次直接插入排序。

.. _1-算法步骤-6:

1. 算法步骤
~~~~~~~~~~~

选择一个增量序列 t1，t2，……，tk，其中 ti > tj, tk = 1；

按增量序列个数 k，对序列进行 k 趟排序；

每趟排序，根据对应的增量 ti，将待排序列分割成若干长度为 m
的子序列，分别对各子表进行直接插入排序。仅增量因子为 1
时，整个序列作为一个表来处理，表长度即为整个序列的长度。

-  希尔排序(shell sort) 是一种分组插入排序算法

-  首先取一个整数 d1 = n/2 ，将元素分为d1 个组，
   每组相邻量元素之间距离为d1, 在各组内进行直接插入排序

-  取第二个整数 d2 = d1 /2 ，重复上诉分组排序过程， 知道 d1=1,
   即所有元素在同一组内进行直接插入排序

-  希尔排序每趟并不使某些元素有序，
   而是使整体数据越来越接近有序；最后一趟排序是的所有数据有序

.. _2-动图演示-6:

2. 动图演示
~~~~~~~~~~~

.. figure:: https://raw.githubusercontent.com/T-hree/Blog_img/main/img/Sorting_shellsort_anim.gif
   :alt: 

.. _代码实现-8:

代码实现
~~~~~~~~

.. code:: python


   def insert_sort_gap(ls, gap):
       for i in range(gap, len(ls)):
           tmp = ls[i]
           j = i - gap
           while j >= 0 and ls[j] > tmp:
               ls[j + gap] = ls[j]
               j -= gap
           ls[j + gap] = tmp


   def shell_sort(ls):
       d = len(ls) // 2
       while d >= 1:
           insert_sort_gap(ls, d)
           d = d // 2

计数排序
--------

计数排序的核心在于将输入的数据值转化为键存储在额外开辟的数组空间中。作为一种线性时间复杂度的排序，计数排序要求输入的数据必须是有确定范围的整数。

1.计数排序的特征

当输入的元素是 n 个 0 到 k 之间的整数时，它的运行时间是 Θ(n +
k)。计数排序不是比较排序，排序的速度快于任何比较排序算法。

由于用来计数的数组C的长度取决于待排序数组中数据的范围（等于待排序数组的最大值与最小值的差加上1），这使得计数排序对于数据范围很大的数组，需要大量时间和内存。例如：计数排序是用来排序0到100之间的数字的最好的算法，但是它不适合按字母顺序排序人名。但是，计数排序可以用在基数排序中的算法来排序数据范围很大的数组。

通俗地理解，例如有 10 个年龄不同的人，统计出有 8 个人的年龄比 A 小，那 A
的年龄就排在第 9
位,用这个方法可以得到其他每个人的位置,也就排好了序。当然，年龄有重复时需要特殊处理（保证稳定性），这就是为什么最后要反向填充目标数组，以及将每个数字的统计减去
1 的原因。

.. _1算法步骤:

1.算法步骤
~~~~~~~~~~

算法的步骤如下：

-  （1）找出待排序的数组中最大和最小的元素

-  （2）统计数组中每个值为i的元素出现的次数，存入数组C的第i项

-  （3）对所有的计数累加（从C中的第一个元素开始，每一项和前一项相加）

-  （4）反向填充目标数组：将每个元素i放在新数组的第C(i)项，每放一个元素就将C(i)减去1

.. _2-动图演示-7:

2. 动图演示
~~~~~~~~~~~

.. figure:: https://raw.githubusercontent.com/T-hree/Blog_img/main/img/countingSort.gif
   :alt: 

--------------

.. _代码实现-9:

代码实现
~~~~~~~~

.. code:: python

   def count_sort(ls, max_count=100):
       count = [0 for _ in range(max_count + 1)]
       for i in ls:
           count[i] += 1
       ls.clear()
       for index, value in enumerate(count):
           for i in range(value):
               ls.append(index)

桶排序
------

-  在计数排序中，
   如果元素的范围比较大（比如在1到1亿之间），如果改造算法?

-  桶排序（bucket
   Sort)：首先将元素分在不同的桶中，在对每个桶中的元素排序

桶排序是计数排序的升级版。它利用了函数的映射关系，高效与否的关键就在于这个映射函数的确定。为了使桶排序更加高效，我们需要做到这两点：

1. 在额外空间充足的情况下，尽量增大桶的数量

2. 使用的映射函数能够将输入的 N 个数据均匀的分配到 K 个桶中

同时，对于桶中元素的排序，选择何种比较排序算法对于性能的影响至关重要。

.. _1-什么时候最快:

1. 什么时候最快
~~~~~~~~~~~~~~~

当输入的数据可以均匀的分配到每一个桶中。

.. _2-什么时候最慢:

2. 什么时候最慢
~~~~~~~~~~~~~~~

当输入的数据被分配到了同一个桶中。

.. _3-示意图:

3. 示意图
~~~~~~~~~

元素分布在桶中：

.. figure:: https://raw.githubusercontent.com/T-hree/Blog_img/main/img/Bucket_sort_1.svg_-20220908163613348.png
   :alt: 

然后，元素在每个桶中排序：

.. figure:: https://raw.githubusercontent.com/T-hree/Blog_img/main/img/Bucket_sort_2.svg_.png
   :alt: 

.. _代码实现-10:

代码实现
~~~~~~~~

.. code:: python

   # 桶排序

   def bucket_sort(ls, n=100, max_num=10000):
       buckets = [[] for _ in range(n)]  # 创建桶
       for val in ls:
           i = min(val // (max_num // n), n - 1)  # 放在几号桶中 极限情况 当val等于10000时  桶为100 但是桶的范围是[0,99]
           buckets[i].append(val)
           # 冒泡排序  保持桶内元素的顺序
           for j in range(len(buckets[i]) - 1, 0, -1):
               if buckets[i][j] < buckets[i][j - 1]:
                   buckets[i][j], buckets[i][j - 1] = buckets[i][j - 1], buckets[i][j]
               else:
                   break
       ls.clear()
       for bucket in buckets:
           ls.extend(bucket)

基数排序
--------

基数排序是一种非比较型整数排序算法，其原理是将整数按位数切割成不同的数字，然后按每个位数分别比较。由于整数也可以表达字符串（比如名字或日期）和特定格式的浮点数，所以基数排序也不是只能使用于整数。

-  多关键字排序：假如现有有一个员工表，要求按照薪资排序，
   薪资相同的员工按年龄排序

   -  先按照薪资进行排序， 在按照年龄进行稳定的排序

-  对32,13,94,52,17,54,93排序，是否可以看做为关键字排序？

.. figure:: https://raw.githubusercontent.com/T-hree/Blog_img/main/img/radixSort.gif
   :alt: 

.. _代码实现-11:

代码实现
~~~~~~~~

.. code:: python

   # 基数排序
   def radix_sort(ls):
       max_num = max(ls)  # 最大值
       it = 0
       while 10 ** it <= max_num:
           # 建桶
           buckets = [[] for _ in range(10)]
           # 分桶
           for var in ls:
               digit = var // (10 ** it) % 10
               buckets[digit].append(var)
           ls.clear()
           # 重新排序
           for bucket in buckets:
               ls.extend(bucket)
           it += 1
